<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE RENDER_MONKEY [
   <!ELEMENT RENDER_MONKEY
   (
      RmEffectWorkspace |
      RmRegistryBranch |
      RmClipboardNode
   )?>

   <!ELEMENT RmEffectWorkspace 
   (
      RmRegistryBranch?,
      RmPlugInData?,
      RmStringVariable*,
      (
         ( RmDirectXEffect, RmOpenGLEffect?, RmOpenGLESEffect? ) |
         ( RmOpenGLEffect, RmDirectXEffect?, RmOpenGLESEffect? ) |
         ( RmOpenGLESEffect, RmDirectXEffect?, RmOpenGLEffect? )
      )?,
      (
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData |
         RmEffectGroup
      )*
   )>

   <!ELEMENT RmEffectGroup
   ( 
      RmPlugInData?,
      (
         RmStringVariable |
         RmDirectXEffect |
         RmOpenGLEffect |
         RmOpenGLESEffect |
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData
      )*
   )>

   <!ELEMENT RmDirectXEffect
   ( 
      RmPlugInData?,
      (
         RmStringVariable |
         RmCamera |
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData |
         RmPass
      )*
   )>

   <!ELEMENT RmOpenGLEffect
   (
      RmPlugInData?,
      (
         RmStringVariable |
         RmCamera |
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData |
         RmGLPass
      )*
   )>
   
   <!ELEMENT RmOpenGLESEffect
   (
      RmPlugInData?,
      (
         RmStringVariable |
         RmCamera |
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData |
         RmGLESPass
      )*
   )>

   <!ELEMENT RmPass
   ( 
      RmPlugInData?,
      RmStringVariable*,
      RmCameraReference?,
      RmModelReference?,
      RmRenderStateBlock?,
      (
         (
         ( RmHLSLShader | RmShader ),
         ( RmShader | RmHLSLShader )?
         )
      )?,
      RmRenderTarget*,
      RmTessellationNode?,
      RmStreamMapReference?,
      (
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmTextureObject |
         RmLightObject |
         RmMaterialObject
         )*
      )>
                                                                     
   <!ELEMENT RmGLPass
   ( 
      RmPlugInData?,
      RmStringVariable*,
      RmCameraReference?,
      RmModelReference?,
      RmRenderStateBlock?,
      (
         ( RmGLShader, RmGLShader? ) 
      )?,
      RmRenderTarget?,
      RmStreamMapReference?,
      (
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmTextureObject |
         RmLightObject |
         RmMaterialObject |
         RmShaderConstant |
         RmSampler
         )*
      )>

   <!ELEMENT RmGLESPass
   ( 
      RmPlugInData?,
      RmStringVariable*,
      RmCameraReference?,
      RmModelReference?,
      RmRenderStateBlock?,
      (
         ( RmGLESShader, RmGLESShader? ) 
      )?,
      RmRenderTarget?,
      RmStreamMapReference?,
      (
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmTextureObject |
         RmLightObject |
         RmMaterialObject |
         RmShaderConstant |
         RmSampler
         )*
      )>      
      
   <!ELEMENT RmShader
   ( 
      RmShaderCode,
      RmPlugInData?,
      (
      RmStringVariable |
      RmShaderConstant
      )*
   )>

   <!ELEMENT RmHLSLShader
   ( 
      RmShaderCode,
      RmPlugInData?,
      (
      RmStringVariable |
      RmShaderConstant |
      RmSampler
      )*
   )>

   <!ELEMENT RmGLShader
   ( 
      RmShaderCode,
      RmPlugInData?,
      (
      RmStringVariable
      )*
   )>

   <!ELEMENT RmGLESShader
   ( 
      RmShaderCode,
      RmPlugInData?,
      (
      RmStringVariable
      )*
   )>
   
   <!ELEMENT RmTextureObject
   (
      RmPlugInData?,
      RmStringVariable*,
      RmTextureReference?,
      RmState*
   )>

   <!ELEMENT RmLightObject
   (
      RmPlugInData?,
      RmStringVariable*,
      RmLightReference?
   )>
   
   <!ELEMENT RmMaterialObject
   (
      RmPlugInData?,
      RmStringVariable*,
      RmMaterialReference?
   )>
   
   <!ELEMENT RmRenderStateBlock
   (
      RmPlugInData?,
      (
         RmStringVariable |
         RmState 
      )*
   )>

   <!ELEMENT RmTessellationNode
   (
      RmPlugInData?,
      RmStringVariable*
   )>
   
   <!ELEMENT RmStreamMap
   (
      RmPlugInData?,
      (
         RmStringVariable |
         RmStream 
      )*
   )>

   <!ELEMENT RmStream               ( RmPlugInData?, RmStreamChannel* )>

   <!ELEMENT RmModelData            ( RmPlugInData?, RmStringVariable* )>  
   <!ELEMENT RmTextureReference     ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmLightReference       ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmMaterialReference    ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmCameraReference      ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmModelReference       ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmStreamMapReference   ( RmPlugInData?, RmStringVariable* )>   
   <!ELEMENT RmRenderableTexture    ( RmPlugInData?, RmStringVariable* )>   
   <!ELEMENT RmRenderTarget         ( RmPlugInData?, RmStringVariable* )>   
   <!ELEMENT RmBooleanVariable      ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmFloatVariable        ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmVectorVariable       ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmMatrixVariable       ( RmPlugInData?, RmStringVariable? )>   
   <!ELEMENT RmColorVariable        ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmIntegerVariable      ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT Rm2DTextureVariable    ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmCubemapVariable      ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT Rm3DTextureVariable    ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmLightVariable        ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmMaterialVariable     ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmCamera               ( RmPlugInData?, RmStringVariable* )>

   <!ELEMENT RmStringVariable       ( RmTextDataBlock, RmPlugInData? )>
   
   <!ELEMENT RmDynamicVariable
   (
      RmDynamicVariableValueContainer,
      RmPlugInData?,
      RmStringVariable?
   )>
   
   <!ELEMENT RmDynamicVariableValueContainer
   (
      RmPlugInData?,
      RmDynamicVariableValue*
   )>
   
   <!ELEMENT RmTextDataBlock        ( #PCDATA ) >
   
   <!ELEMENT RmRegistryBranch
   ( 
      RmTextDataBlock?,
      (
         RmRegistryBranch |
         RmStringVariable |
         RmIntegerVariable |
         RmBooleanVariable |
         RmFloatVariable
      )*      
   )>

   <!ELEMENT RmPlugInData
   ( 
      RmTextDataBlock?,
      (
         RmStringVariable |
         RmIntegerVariable |
         RmBooleanVariable |
         RmFloatVariable |
         RmVectorVariable
      )*      
   )>
   
   <!ELEMENT RmClipboardNode
   (
      RmTextDataBlock?,
      (
         RmEffectWorkspace |
         RmEffectGroup |
         RmDirectXEffect |
         RmOpenGLEffect |
         RmOpenGLESEffect |
         RmPass |
         RmGLPass |
         RmGLESPass |
         RmShader |
         RmHLSLShader |
         RmGLShader |
         RmGLESShader |
         RmShaderConstant |
         RmSampler |
         RmTextureObject |
         RmLightObject |
         RmMaterialObject |
         RmRenderStateBlock |
         RmState |
         RmStreamMap |
         RmStream |
         RmStreamChannel |
         RmModelData |
         RmTextureReference |
         RmLightReference |
         RmMaterialReference |
         RmModelReference |
         RmStreamMapReference |
         RmRenderableTexture |
         RmRenderTarget |
         RmBooleanVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmDynamicVariableValue |
         RmColorVariable |
         RmIntegerVariable |
         RmStringVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRegistryBranch |
         RmPlugInData |
         RmCamera |
         RmCameraReference
      )*      
   )>
   
   <!ELEMENT RmStreamChannel        ( RmPlugInData? ) >
   <!ELEMENT RmShaderConstant       ( RmPlugInData? ) >
   <!ELEMENT RmSampler              ( RmPlugInData? ) >
   <!ELEMENT RmState                ( RmPlugInData? ) >
   <!ELEMENT RmDynamicVariableValue ( RmPlugInData? ) >
   
   <!ELEMENT RmShaderCode           ( #PCDATA ) >

   <!ATTLIST RmEffectWorkspace 
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ACTIVE_EFFECT                 CDATA #REQUIRED
      VALIDATION_STRING             CDATA #REQUIRED
      XML_VERSION                   CDATA #REQUIRED
   >                                 

   <!ATTLIST RmEffectGroup           
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >                                 

   <!ATTLIST RmDirectXEffect                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ACTIVE_CAMERA                 CDATA #REQUIRED
   >                                 

   <!ATTLIST RmOpenGLEffect                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ACTIVE_CAMERA                 CDATA #REQUIRED
   >                                 
   
   <!ATTLIST RmOpenGLESEffect                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ACTIVE_CAMERA                 CDATA #REQUIRED
   >                                 

   <!ATTLIST RmPass                  
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PASS_INDEX                    CDATA #REQUIRED
      ENABLED                       ( TRUE | FALSE ) #REQUIRED
   >                                 

   <!ATTLIST RmGLPass                  
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PASS_INDEX                    CDATA #REQUIRED
      ENABLED                       ( TRUE | FALSE ) #REQUIRED
   >                                 
   
   <!ATTLIST RmGLESPass                  
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PASS_INDEX                    CDATA #REQUIRED
      ENABLED                       ( TRUE | FALSE ) #REQUIRED
   >                                 
   
   <!ATTLIST RmShader        
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PIXEL_SHADER                  CDATA #REQUIRED
   >                                 

   <!ATTLIST RmHLSLShader        
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PIXEL_SHADER                  ( TRUE | FALSE ) #REQUIRED
      TARGET                        CDATA #REQUIRED
      ENTRY_POINT                   CDATA #REQUIRED
      COMPILER_FLAGS                CDATA #REQUIRED
   >  

   <!ATTLIST RmGLShader        
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PIXEL_SHADER                  ( TRUE | FALSE ) #REQUIRED
   >  
   
   <!ATTLIST RmGLESShader        
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PIXEL_SHADER                  ( TRUE | FALSE ) #REQUIRED
   >  

   <!ATTLIST RmShaderConstant
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      REGISTER                      CDATA #REQUIRED
   >                                 

   <!ATTLIST RmSampler               
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      REGISTER                      CDATA #REQUIRED
   >

   <!ATTLIST RmTextureObject
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      STATE_INDEX                   CDATA #REQUIRED
      VERTEX_TEXTURE                ( TRUE | FALSE ) #REQUIRED
   >

   <!ATTLIST RmLightObject
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      INDEX                         CDATA #REQUIRED
   >
   
   <!ATTLIST RmMaterialObject
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      INDEX                         CDATA #REQUIRED
   >
   
   <!ATTLIST RmRenderStateBlock
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >                                 

   <!ATTLIST RmState                 
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      STATE                         CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
      USAGE                         CDATA #REQUIRED
   >                               

   <!ATTLIST RmStreamMap           
     NAME                           CDATA #REQUIRED
     API                            CDATA #REQUIRED
   >                               

   <!ATTLIST RmStream              
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      STRIDE                        CDATA #REQUIRED
   >

   <!ATTLIST RmStreamChannel
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      DATA_SIZE                     CDATA #REQUIRED
      DATA_TYPE                     CDATA #REQUIRED
      REGISTER                      CDATA #REQUIRED
      USAGE                         CDATA #REQUIRED
      USAGE_INDEX                   CDATA #REQUIRED
      ATTRIBUTE_NAME                CDATA #REQUIRED
   >

   <!ATTLIST RmModelData
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIENTATION                   CDATA #REQUIRED
   >

   <!ATTLIST RmTextureReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >

   <!ATTLIST RmLightReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >
   
   <!ATTLIST RmMaterialReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >
   
   <!ATTLIST RmModelReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >

   <!ATTLIST RmStreamMapReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >

   <!ATTLIST RmRenderableTexture
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIGIN                        CDATA #REQUIRED
      WIDTH                         CDATA #REQUIRED
      HEIGHT                        CDATA #REQUIRED
      FORMAT                        CDATA #REQUIRED
      USE_VIEWPORT_DIMENSIONS       ( TRUE | FALSE ) #REQUIRED
      GENERATE_MIPMAPS              ( TRUE | FALSE ) #REQUIRED
      WIDTH_RATIO                   CDATA #REQUIRED
      HEIGHT_RATIO                  CDATA #REQUIRED
   >

   <!ATTLIST RmRenderTarget
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      INDEX                         CDATA #REQUIRED
      RENDER_TO_SCREEN              ( TRUE | FALSE ) #REQUIRED
      COLOR_CLEAR                   ( TRUE | FALSE ) #REQUIRED
      DEPTH_CLEAR                   ( TRUE | FALSE ) #REQUIRED
      CLEAR_COLOR_VALUE             CDATA #REQUIRED
      DEPTH_CLEAR_VALUE             CDATA #REQUIRED
   >
   
   <!ATTLIST RmBooleanVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
   >

   <!ATTLIST RmFloatVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
      MIN                           CDATA #REQUIRED
      MAX                           CDATA #REQUIRED
      CLAMP                         ( TRUE | FALSE ) #REQUIRED
   >

   <!ATTLIST RmVectorVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE_0                       CDATA #REQUIRED
      VALUE_1                       CDATA #REQUIRED
      VALUE_2                       CDATA #REQUIRED
      VALUE_3                       CDATA #REQUIRED
      MIN                           CDATA #REQUIRED
      MAX                           CDATA #REQUIRED
      CLAMP                         ( TRUE | FALSE ) #REQUIRED
      NORMALIZE                     ( TRUE | FALSE ) #REQUIRED
   >

   <!ATTLIST RmMatrixVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE_0                       CDATA #REQUIRED
      VALUE_1                       CDATA #REQUIRED
      VALUE_2                       CDATA #REQUIRED
      VALUE_3                       CDATA #REQUIRED
      VALUE_4                       CDATA #REQUIRED
      VALUE_5                       CDATA #REQUIRED
      VALUE_6                       CDATA #REQUIRED
      VALUE_7                       CDATA #REQUIRED
      VALUE_8                       CDATA #REQUIRED
      VALUE_9                       CDATA #REQUIRED
      VALUE_10                      CDATA #REQUIRED
      VALUE_11                      CDATA #REQUIRED
      VALUE_12                      CDATA #REQUIRED
      VALUE_13                      CDATA #REQUIRED
      VALUE_14                      CDATA #REQUIRED
      VALUE_15                      CDATA #REQUIRED
   >

   <!ATTLIST RmDynamicVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VARIABLE_TYPE                 ( FLOAT | INTEGER | BOOLEAN ) #REQUIRED
      ROWS                          CDATA #REQUIRED
      COLUMNS                       CDATA #REQUIRED
      FIXED_SIZE                    ( TRUE | FALSE ) #REQUIRED
      MIN                           CDATA #REQUIRED
      MAX                           CDATA #REQUIRED
      CLAMP                         ( TRUE | FALSE ) #REQUIRED
      NORMALIZE                     ( TRUE | FALSE ) #REQUIRED
   >
   
   <!ATTLIST RmDynamicVariableValue
      ROW_INDEX                     CDATA #REQUIRED
      COLUMN_INDEX                  CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
   >
   
   <!ATTLIST RmColorVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE_0                       CDATA #REQUIRED
      VALUE_1                       CDATA #REQUIRED
      VALUE_2                       CDATA #REQUIRED
      VALUE_3                       CDATA #REQUIRED
   >

   <!ATTLIST RmIntegerVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
      MIN                           CDATA #REQUIRED
      MAX                           CDATA #REQUIRED
      CLAMP                         ( TRUE | FALSE ) #REQUIRED
   >
   
   <!ATTLIST RmStringVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
   >

   <!ATTLIST Rm2DTextureVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIGIN                        CDATA #REQUIRED
   >

   <!ATTLIST RmCubemapVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIGIN                        CDATA #REQUIRED
   >

   <!ATTLIST Rm3DTextureVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIGIN                        CDATA #REQUIRED
   >

   <!ATTLIST RmLightVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      LIGHT_ENABLED                 ( TRUE | FALSE ) #REQUIRED
      LIGHT_TYPE                    ( POSITIONAL | DIRECTIONAL | SPOTLIGHT ) #REQUIRED
      AMBIENT_0                     CDATA #REQUIRED
      AMBIENT_1                     CDATA #REQUIRED
      AMBIENT_2                     CDATA #REQUIRED
      AMBIENT_3                     CDATA #REQUIRED
      DIFFUSE_0                     CDATA #REQUIRED
      DIFFUSE_1                     CDATA #REQUIRED
      DIFFUSE_2                     CDATA #REQUIRED
      DIFFUSE_3                     CDATA #REQUIRED
      SPECULAR_0                    CDATA #REQUIRED
      SPECULAR_1                    CDATA #REQUIRED
      SPECULAR_2                    CDATA #REQUIRED
      SPECULAR_3                    CDATA #REQUIRED
      POSITION_0                    CDATA #REQUIRED
      POSITION_1                    CDATA #REQUIRED
      POSITION_2                    CDATA #REQUIRED
      DIRECTION_0                   CDATA #REQUIRED
      DIRECTION_1                   CDATA #REQUIRED
      DIRECTION_2                   CDATA #REQUIRED
      ATTENUATION_0                 CDATA #REQUIRED
      ATTENUATION_1                 CDATA #REQUIRED
      ATTENUATION_2                 CDATA #REQUIRED
      SPOTLIGHT_THETA               CDATA #REQUIRED
      SPOTLIGHT_PHI                 CDATA #REQUIRED
      RANGE                         CDATA #REQUIRED
      FALLOFF                       CDATA #REQUIRED
   >
   
   <!ATTLIST RmMaterialVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      AMBIENT_0                     CDATA #REQUIRED
      AMBIENT_1                     CDATA #REQUIRED
      AMBIENT_2                     CDATA #REQUIRED
      AMBIENT_3                     CDATA #REQUIRED
      DIFFUSE_0                     CDATA #REQUIRED
      DIFFUSE_1                     CDATA #REQUIRED
      DIFFUSE_2                     CDATA #REQUIRED
      DIFFUSE_3                     CDATA #REQUIRED
      SPECULAR_0                    CDATA #REQUIRED
      SPECULAR_1                    CDATA #REQUIRED
      SPECULAR_2                    CDATA #REQUIRED
      SPECULAR_3                    CDATA #REQUIRED
      EMISSIVE_0                    CDATA #REQUIRED
      EMISSIVE_1                    CDATA #REQUIRED
      EMISSIVE_2                    CDATA #REQUIRED
      EMISSIVE_3                    CDATA #REQUIRED
      SPECULAR_POWER                CDATA #REQUIRED
   >
      
   <!ATTLIST RmRegistryBranch
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      XML_VERSION                   CDATA #REQUIRED
   >
   
   <!ATTLIST RmPlugInData
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PLUGIN_GUID                   CDATA #REQUIRED
   >

   <!ATTLIST RmClipboardNode
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      XML_VERSION                   CDATA #REQUIRED
   >
   
   <!ATTLIST RmCamera                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      CAMERA_POSITION_X             CDATA #REQUIRED
      CAMERA_POSITION_Y             CDATA #REQUIRED
      CAMERA_POSITION_Z             CDATA #REQUIRED
      LOOK_AT_VECTOR_X              CDATA #REQUIRED
      LOOK_AT_VECTOR_Y              CDATA #REQUIRED
      LOOK_AT_VECTOR_Z              CDATA #REQUIRED
      UP_VECTOR_X                   CDATA #REQUIRED
      UP_VECTOR_Y                   CDATA #REQUIRED
      UP_VECTOR_Z                   CDATA #REQUIRED
      FOV                           CDATA #REQUIRED
      NEAR_CLIP_PLANE               CDATA #REQUIRED
      FAR_CLIP_PLANE                CDATA #REQUIRED
   >                                 

   <!ATTLIST RmCameraReference                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      USE_ACTIVE_CAMERA             ( TRUE | FALSE ) #REQUIRED
   >                               
   
   <!ATTLIST RmShaderCode                
      TYPE                          ( TEXT ) #REQUIRED
   >                               
   
   <!ATTLIST RmTextDataBlock                
      TYPE                          ( TEXT ) #REQUIRED
   >                               
   
   <!ATTLIST RmTessellationNode
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      MIN_TESSELLATION_LEVEL        CDATA #REQUIRED
      MAX_TESSELLATION_LEVEL        CDATA #REQUIRED
   >
]>
<RENDER_MONKEY>
 <RmEffectWorkspace NAME="Effect Workspace" API="" ACTIVE_EFFECT="Effect Workspace.Effect Group 1.Planes" VALIDATION_STRING="" XML_VERSION="RenderMonkey 1.71">
  <RmRegistryBranch NAME="RM_REGISTRY" API="" XML_VERSION="RenderMonkey 1.71">
   <RmRegistryBranch NAME="RM_LOCAL" API="" XML_VERSION="RenderMonkey 1.71">
    <RmRegistryBranch NAME="RM_PLUGIN" API="" XML_VERSION="RenderMonkey 1.71"><RmTextDataBlock TYPE="TEXT"><![CDATA[
<DockingPaneLayouts><Application_Layout><Pane-1><Type>2</Type><DockingCX>0</DockingCX><DockingCY>0</DockingCY><Horiz>1</Horiz><Pane-1>2</Pane-1><Pane-2>3</Pane-2><Pane-3>4</Pane-3><Pane-4>5</Pane-4><Pane-5>6</Pane-5><Pane-6>7</Pane-6><Pane-7>8</Pane-7><Pane-8>9</Pane-8><Pane-9>10</Pane-9><Pane-10>11</Pane-10><Panes>10</Panes></Pane-1><Pane-2><Type>1</Type><DockingCX>212</DockingCX><DockingCY>311</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-2><Pane-3><Type>1</Type><DockingCX>427</DockingCX><DockingCY>102</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-3><Pane-4><Type>1</Type><DockingCX>193</DockingCX><DockingCY>302</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-4><Pane-5><Type>1</Type><DockingCX>427</DockingCX><DockingCY>102</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-5><Pane-6><Type>1</Type><DockingCX>427</DockingCX><DockingCY>102</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-6><Pane-7><Type>1</Type><DockingCX>331</DockingCX><DockingCY>170</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-7><Pane-8><Type>1</Type><DockingCX>331</DockingCX><DockingCY>170</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-8><Pane-9><Type>1</Type><DockingCX>331</DockingCX><DockingCY>170</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-9><Pane-10><Type>1</Type><DockingCX>331</DockingCX><DockingCY>170</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-10><Pane-11><Type>2</Type><DockingCX>0</DockingCX><DockingCY>0</DockingCY><Horiz>0</Horiz><Pane-1>12</Pane-1><Pane-2>18</Pane-2><Panes>2</Panes></Pane-11><Pane-12><Type>2</Type><DockingCX>0</DockingCX><DockingCY>837</DockingCY><Horiz>1</Horiz><Pane-1>13</Pane-1><Pane-2>15</Pane-2><Pane-3>16</Pane-3><Panes>3</Panes></Pane-12><Pane-13><Type>1</Type><DockingCX>237</DockingCX><DockingCY>250</DockingCY><Selected>14</Selected><Panes>1</Panes><Pane-1>14</Pane-1></Pane-13><Pane-14><Type>0</Type><DockingCX>250</DockingCX><DockingCY>250</DockingCY><Title>Workspace</Title><ID>1000</ID><IconID>-1</IconID><Options>0</Options><DockingHolder>13</DockingHolder><FloatingHolder>0</FloatingHolder><LastHolder>13</LastHolder></Pane-14><Pane-15><Type>4</Type><DockingCX>0</DockingCX><DockingCY>0</DockingCY></Pane-15><Pane-16><Type>1</Type><DockingCX>338</DockingCX><DockingCY>250</DockingCY><Selected>17</Selected><Panes>1</Panes><Pane-1>17</Pane-1></Pane-16><Pane-17><Type>0</Type><DockingCX>250</DockingCX><DockingCY>250</DockingCY><Title>Artist Editor</Title><ID>1001</ID><IconID>-1</IconID><Options>0</Options><DockingHolder>16</DockingHolder><FloatingHolder>0</FloatingHolder><LastHolder>16</LastHolder></Pane-17><Pane-18><Type>1</Type><DockingCX>250</DockingCX><DockingCY>250</DockingCY><Selected>19</Selected><Panes>1</Panes><Pane-1>19</Pane-1></Pane-18><Pane-19><Type>0</Type><DockingCX>250</DockingCX><DockingCY>250</DockingCY><Title>Output</Title><ID>1002</ID><IconID>-1</IconID><Options>0</Options><DockingHolder>18</DockingHolder><FloatingHolder>0</FloatingHolder><LastHolder>18</LastHolder></Pane-19><Pane-20><Type>0</Type><DockingCX>331</DockingCX><DockingCY>170</DockingCY><Title>CubeCenter</Title><ID>1100</ID><IconID>-1</IconID><Options>0</Options><DockingHolder>10</DockingHolder><FloatingHolder>23</FloatingHolder><LastHolder>23</LastHolder></Pane-20><Pane-21><Type>3</Type><DockingCX>0</DockingCX><DockingCY>0</DockingCY><TopContaner>22</TopContaner><WindowRectTopPos>22</WindowRectTopPos><WindowRectBottomPos>192</WindowRectBottomPos><WindowRectLeftPos>0</WindowRectLeftPos><WindowRectRightPos>331</WindowRectRightPos></Pane-21><Pane-22><Type>2</Type><DockingCX>331</DockingCX><DockingCY>170</DockingCY><Horiz>1</Horiz><Pane-1>23</Pane-1><Panes>1</Panes></Pane-22><Pane-23><Type>1</Type><DockingCX>331</DockingCX><DockingCY>170</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-23><Pane-24><Type>0</Type><DockingCX>331</DockingCX><DockingCY>170</DockingCY><Title>CubeBoundsHigh</Title><ID>1101</ID><IconID>-1</IconID><Options>0</Options><DockingHolder>9</DockingHolder><FloatingHolder>27</FloatingHolder><LastHolder>27</LastHolder></Pane-24><Pane-25><Type>3</Type><DockingCX>0</DockingCX><DockingCY>0</DockingCY><TopContaner>26</TopContaner><WindowRectTopPos>22</WindowRectTopPos><WindowRectBottomPos>192</WindowRectBottomPos><WindowRectLeftPos>0</WindowRectLeftPos><WindowRectRightPos>331</WindowRectRightPos></Pane-25><Pane-26><Type>2</Type><DockingCX>331</DockingCX><DockingCY>170</DockingCY><Horiz>1</Horiz><Pane-1>27</Pane-1><Panes>1</Panes></Pane-26><Pane-27><Type>1</Type><DockingCX>331</DockingCX><DockingCY>170</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-27><Pane-28><Type>0</Type><DockingCX>331</DockingCX><DockingCY>170</DockingCY><Title>TranslateDist</Title><ID>1102</ID><IconID>-1</IconID><Options>0</Options><DockingHolder>8</DockingHolder><FloatingHolder>31</FloatingHolder><LastHolder>31</LastHolder></Pane-28><Pane-29><Type>3</Type><DockingCX>0</DockingCX><DockingCY>0</DockingCY><TopContaner>30</TopContaner><WindowRectTopPos>22</WindowRectTopPos><WindowRectBottomPos>192</WindowRectBottomPos><WindowRectLeftPos>0</WindowRectLeftPos><WindowRectRightPos>331</WindowRectRightPos></Pane-29><Pane-30><Type>2</Type><DockingCX>331</DockingCX><DockingCY>170</DockingCY><Horiz>1</Horiz><Pane-1>31</Pane-1><Panes>1</Panes></Pane-30><Pane-31><Type>1</Type><DockingCX>331</DockingCX><DockingCY>170</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-31><Pane-32><Type>0</Type><DockingCX>331</DockingCX><DockingCY>170</DockingCY><Title>CubeDims</Title><ID>1103</ID><IconID>-1</IconID><Options>0</Options><DockingHolder>7</DockingHolder><FloatingHolder>35</FloatingHolder><LastHolder>35</LastHolder></Pane-32><Pane-33><Type>3</Type><DockingCX>0</DockingCX><DockingCY>0</DockingCY><TopContaner>34</TopContaner><WindowRectTopPos>22</WindowRectTopPos><WindowRectBottomPos>192</WindowRectBottomPos><WindowRectLeftPos>0</WindowRectLeftPos><WindowRectRightPos>331</WindowRectRightPos></Pane-33><Pane-34><Type>2</Type><DockingCX>331</DockingCX><DockingCY>170</DockingCY><Horiz>1</Horiz><Pane-1>35</Pane-1><Panes>1</Panes></Pane-34><Pane-35><Type>1</Type><DockingCX>331</DockingCX><DockingCY>170</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-35><Pane-36><Type>0</Type><DockingCX>427</DockingCX><DockingCY>102</DockingCY><Title>PlaneSpacing</Title><ID>1104</ID><IconID>-1</IconID><Options>0</Options><DockingHolder>6</DockingHolder><FloatingHolder>39</FloatingHolder><LastHolder>39</LastHolder></Pane-36><Pane-37><Type>3</Type><DockingCX>0</DockingCX><DockingCY>0</DockingCY><TopContaner>38</TopContaner><WindowRectTopPos>22</WindowRectTopPos><WindowRectBottomPos>124</WindowRectBottomPos><WindowRectLeftPos>0</WindowRectLeftPos><WindowRectRightPos>427</WindowRectRightPos></Pane-37><Pane-38><Type>2</Type><DockingCX>427</DockingCX><DockingCY>102</DockingCY><Horiz>1</Horiz><Pane-1>39</Pane-1><Panes>1</Panes></Pane-38><Pane-39><Type>1</Type><DockingCX>427</DockingCX><DockingCY>102</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-39><Pane-40><Type>0</Type><DockingCX>427</DockingCX><DockingCY>102</DockingCY><Title>f1MyFloat</Title><ID>1105</ID><IconID>-1</IconID><Options>0</Options><DockingHolder>5</DockingHolder><FloatingHolder>43</FloatingHolder><LastHolder>43</LastHolder></Pane-40><Pane-41><Type>3</Type><DockingCX>0</DockingCX><DockingCY>0</DockingCY><TopContaner>42</TopContaner><WindowRectTopPos>22</WindowRectTopPos><WindowRectBottomPos>124</WindowRectBottomPos><WindowRectLeftPos>0</WindowRectLeftPos><WindowRectRightPos>427</WindowRectRightPos></Pane-41><Pane-42><Type>2</Type><DockingCX>427</DockingCX><DockingCY>102</DockingCY><Horiz>1</Horiz><Pane-1>43</Pane-1><Panes>1</Panes></Pane-42><Pane-43><Type>1</Type><DockingCX>427</DockingCX><DockingCY>102</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-43><Pane-44><Type>0</Type><DockingCX>193</DockingCX><DockingCY>302</DockingCY><Title>fvAmbient</Title><ID>1106</ID><IconID>-1</IconID><Options>0</Options><DockingHolder>4</DockingHolder><FloatingHolder>47</FloatingHolder><LastHolder>47</LastHolder></Pane-44><Pane-45><Type>3</Type><DockingCX>0</DockingCX><DockingCY>0</DockingCY><TopContaner>46</TopContaner><WindowRectTopPos>22</WindowRectTopPos><WindowRectBottomPos>324</WindowRectBottomPos><WindowRectLeftPos>0</WindowRectLeftPos><WindowRectRightPos>193</WindowRectRightPos></Pane-45><Pane-46><Type>2</Type><DockingCX>193</DockingCX><DockingCY>302</DockingCY><Horiz>1</Horiz><Pane-1>47</Pane-1><Panes>1</Panes></Pane-46><Pane-47><Type>1</Type><DockingCX>193</DockingCX><DockingCY>302</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-47><Pane-48><Type>0</Type><DockingCX>427</DockingCX><DockingCY>102</DockingCY><Title>TexSpacing</Title><ID>1107</ID><IconID>-1</IconID><Options>0</Options><DockingHolder>3</DockingHolder><FloatingHolder>51</FloatingHolder><LastHolder>51</LastHolder></Pane-48><Pane-49><Type>3</Type><DockingCX>0</DockingCX><DockingCY>0</DockingCY><TopContaner>50</TopContaner><WindowRectTopPos>22</WindowRectTopPos><WindowRectBottomPos>124</WindowRectBottomPos><WindowRectLeftPos>0</WindowRectLeftPos><WindowRectRightPos>427</WindowRectRightPos></Pane-49><Pane-50><Type>2</Type><DockingCX>427</DockingCX><DockingCY>102</DockingCY><Horiz>1</Horiz><Pane-1>51</Pane-1><Panes>1</Panes></Pane-50><Pane-51><Type>1</Type><DockingCX>427</DockingCX><DockingCY>102</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-51><Pane-52><Type>0</Type><DockingCX>212</DockingCX><DockingCY>311</DockingCY><Title>HeadVolume</Title><ID>1108</ID><IconID>-1</IconID><Options>0</Options><DockingHolder>2</DockingHolder><FloatingHolder>55</FloatingHolder><LastHolder>55</LastHolder></Pane-52><Pane-53><Type>3</Type><DockingCX>0</DockingCX><DockingCY>0</DockingCY><TopContaner>54</TopContaner><WindowRectTopPos>22</WindowRectTopPos><WindowRectBottomPos>333</WindowRectBottomPos><WindowRectLeftPos>0</WindowRectLeftPos><WindowRectRightPos>212</WindowRectRightPos></Pane-53><Pane-54><Type>2</Type><DockingCX>212</DockingCX><DockingCY>311</DockingCY><Horiz>1</Horiz><Pane-1>55</Pane-1><Panes>1</Panes></Pane-54><Pane-55><Type>1</Type><DockingCX>212</DockingCX><DockingCY>311</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-55><Summary><TopContainer>1</TopContainer><Client>15</Client><Panes>55</Panes></Summary></Application_Layout></DockingPaneLayouts>
]]></RmTextDataBlock>
     <RmRegistryBranch NAME="RmTextureObjectEditor" API="" XML_VERSION="RenderMonkey 1.71">
      <RmRegistryBranch NAME="NodeRepository" API="" XML_VERSION="RenderMonkey 1.71">
       <RmRegistryBranch NAME="Effect Workspace.Effect Group 1.Planes" API="" XML_VERSION="RenderMonkey 1.71">
        <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="125" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="125" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1079" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="556" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       </RmRegistryBranch>
      </RmRegistryBranch>
      <RmRegistryBranch NAME="EditNodeRepository" API="" XML_VERSION="RenderMonkey 1.71">
       <RmRegistryBranch NAME="Effect Workspace.Effect Group 1.Planes.Pass 0.HeadVolume" API="" XML_VERSION="RenderMonkey 1.71"/>
      </RmRegistryBranch>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmDynamicVariableEditor" API="" XML_VERSION="RenderMonkey 1.71">
      <RmRegistryBranch NAME="NodeRepository" API="" XML_VERSION="RenderMonkey 1.71"/>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmRenderStateBlockEditor" API="" XML_VERSION="RenderMonkey 1.71">
      <RmRegistryBranch NAME="NodeRepository" API="" XML_VERSION="RenderMonkey 1.71">
       <RmRegistryBranch NAME="Effect Workspace.Effect Group 1.Planes" API="" XML_VERSION="RenderMonkey 1.71">
        <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="100" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="100" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1083" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="560" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       </RmRegistryBranch>
      </RmRegistryBranch>
      <RmRegistryBranch NAME="EditNodeRepository" API="" XML_VERSION="RenderMonkey 1.71">
       <RmRegistryBranch NAME="Effect Workspace.Effect Group 1.Planes.Pass 20.Render State" API="" XML_VERSION="RenderMonkey 1.71"/>
      </RmRegistryBranch>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmPreviewDx9Window" API="" XML_VERSION="RenderMonkey 1.71"/>
     <RmRegistryBranch NAME="RmPreviewGLESWindow" API="" XML_VERSION="RenderMonkey 1.71"/>
     <RmRegistryBranch NAME="RmPreviewGLPreview" API="" XML_VERSION="RenderMonkey 1.71"/>
     <RmRegistryBranch NAME="RmPreviewGLWindow" API="" XML_VERSION="RenderMonkey 1.71">
      <RmRegistryBranch NAME="EffectPlacementRepository" API="" XML_VERSION="RenderMonkey 1.71">
       <RmRegistryBranch NAME="Effect Workspace.Effect Group 1.Cube" API="" XML_VERSION="RenderMonkey 1.71">
        <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="350" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="350" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="3" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       </RmRegistryBranch>
       <RmRegistryBranch NAME="Effect Workspace.Effect Group 1.Planes" API="" XML_VERSION="RenderMonkey 1.71">
        <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="350" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="350" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="3" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       </RmRegistryBranch>
      </RmRegistryBranch>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmLightEditor" API="" XML_VERSION="RenderMonkey 1.71">
      <RmRegistryBranch NAME="EditNodeRepository" API="" XML_VERSION="RenderMonkey 1.71"/>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="NoteEditor" API="" XML_VERSION="RenderMonkey 1.71">
      <RmRegistryBranch NAME="EditNodeRepository" API="" XML_VERSION="RenderMonkey 1.71"/>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmRenderableTextureEditor" API="" XML_VERSION="RenderMonkey 1.71">
      <RmRegistryBranch NAME="EditNodeRepository" API="" XML_VERSION="RenderMonkey 1.71"/>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmRenderTargetEditor" API="" XML_VERSION="RenderMonkey 1.71">
      <RmRegistryBranch NAME="EditNodeRepository" API="" XML_VERSION="RenderMonkey 1.71"/>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmShaderEditor" API="" XML_VERSION="RenderMonkey 1.71">
      <RmRegistryBranch NAME="Effect Workspace.Effect Group 1.Planes" API="" XML_VERSION="RenderMonkey 1.71">
       <RmRegistryBranch NAME="Disassembly" API="" XML_VERSION="RenderMonkey 1.71"/>
       <RmStringVariable NAME="Editing Shader" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
Fragment Program]]></RmTextDataBlock></RmStringVariable>
       <RmStringVariable NAME="Editing Pass" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
Pass 0]]></RmTextDataBlock></RmStringVariable>
       <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="650" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="650" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
      </RmRegistryBranch>
      <RmRegistryBranch NAME="Effect Workspace.Effect Group 1.Cube" API="" XML_VERSION="RenderMonkey 1.71">
       <RmRegistryBranch NAME="Disassembly" API="" XML_VERSION="RenderMonkey 1.71"/>
       <RmStringVariable NAME="Editing Shader" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
Vertex Program]]></RmTextDataBlock></RmStringVariable>
       <RmStringVariable NAME="Editing Pass" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
Pass 0]]></RmTextDataBlock></RmStringVariable>
       <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="650" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="650" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
      </RmRegistryBranch>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmTessellationNodeEditorDlg" API="" XML_VERSION="RenderMonkey 1.71">
      <RmRegistryBranch NAME="EditNodeRepository" API="" XML_VERSION="RenderMonkey 1.71"/>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmTextureGenerator" API="" XML_VERSION="RenderMonkey 1.71">
      <RmRegistryBranch NAME="EditNodeRepository" API="" XML_VERSION="RenderMonkey 1.71"/>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmScalarEditor" API="" XML_VERSION="RenderMonkey 1.71">
      <RmRegistryBranch NAME="NodeRepository" API="" XML_VERSION="RenderMonkey 1.71"/>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmColorEditor" API="" XML_VERSION="RenderMonkey 1.71">
      <RmRegistryBranch NAME="NodeRepository" API="" XML_VERSION="RenderMonkey 1.71"/>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmTextureViewer" API="" XML_VERSION="RenderMonkey 1.71">
      <RmRegistryBranch NAME="NodeRepository" API="" XML_VERSION="RenderMonkey 1.71">
       <RmRegistryBranch NAME="Effect Workspace.Effect Group 1.Planes.HeadVolume" API="" XML_VERSION="RenderMonkey 1.71">
        <RmIntegerVariable NAME="DockPaneID" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1108" MIN="-10" MAX="10" CLAMP="FALSE"/>
       </RmRegistryBranch>
      </RmRegistryBranch>
     </RmRegistryBranch>
    </RmRegistryBranch>
    <RmRegistryBranch NAME="WORKSPACE" API="" XML_VERSION="RenderMonkey 1.71">
     <RmStringVariable NAME="LAST_SAVE" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
9/5/2012 16:43:13]]></RmTextDataBlock></RmStringVariable>
     <RmStringVariable NAME="VERSION" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
RenderMonkey Version 1.82 (build 322)]]></RmTextDataBlock></RmStringVariable>
     <RmStringVariable NAME="XML_VERSION" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
RenderMonkey 1.71]]></RmTextDataBlock></RmStringVariable>
     <RmStringVariable NAME="BASE_WORKSPACE_PATH" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
C:\Program Files\AMD\RenderMonkey 1.82\Examples\MyExamples\]]></RmTextDataBlock></RmStringVariable>
    </RmRegistryBranch>
   </RmRegistryBranch>
  </RmRegistryBranch>
  <RmEffectGroup NAME="Effect Group 1" API="">
   <RmOpenGLEffect NAME="Cube" API="OpenGL" ACTIVE_CAMERA="">
    <RmStreamMap NAME="Stream Mapping" API="">
     <RmStream NAME="Stream" API="" STRIDE="32">
      <RmStreamChannel NAME="Position_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="0" USAGE="0" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_Vertex"/>
      <RmStreamChannel NAME="Normal_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="0" USAGE="3" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_Normal"/>
      <RmStreamChannel NAME="TexCoord_0" API="" DATA_SIZE="8" DATA_TYPE="1" REGISTER="0" USAGE="5" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_TexCoord0"/>
     </RmStream>
    </RmStreamMap>
    <RmModelData NAME="Model" API="" FILE_NAME="..\Media\Models\Sphere.3ds" ORIENTATION="0"/>
    <RmModelData NAME="Cube" API="" FILE_NAME="..\Media\Models\Cube.3ds" ORIENTATION="0"/>
    <RmGLPass NAME="Pass 0" API="OpenGL" PASS_INDEX="0" ENABLED="TRUE">
     <RmModelReference NAME="Cube" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

void main(void)
{
   vec4 newVertexPos = gl_Vertex;
   if (gl_Vertex.x >= 0.0)
      newVertexPos.x = CubeCenter.x + CubeDims.x * .5;
   else
      newVertexPos.x = CubeCenter.x - CubeDims.x * .5;
   if (gl_Vertex.y >= 0.0)
      newVertexPos.y = CubeCenter.y + CubeDims.y * .5;
   else
      newVertexPos.y = CubeCenter.y - CubeDims.y * .5;
   if (gl_Vertex.z >= 0.0)
      newVertexPos.z = CubeCenter.z + CubeDims.z * .5;
   else
      newVertexPos.z = CubeCenter.z - CubeDims.z * .5;
   gl_Position = gl_ModelViewProjectionMatrix * newVertexPos;

   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}
]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

void main(void)
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec4  fvBaseColor      = vec4(1.0, .5, 0.0, 0.0);
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient + fvTotalDiffuse + fvTotalSpecular );
 }
]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fSpecularPower" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvDiffuse" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvEyePosition" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvLightPosition" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvSpecular" API="" REGISTER="-1"/>
    </RmGLPass>
   </RmOpenGLEffect>
   <RmOpenGLEffect NAME="Planes" API="OpenGL" ACTIVE_CAMERA="">
    <RmFloatVariable NAME="PlaneSpacing" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE="2.000000" MIN="0.000000" MAX="100.000000" CLAMP="FALSE"/>
    <RmFloatVariable NAME="TexStart" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE="0.250000" MIN="0.000000" MAX="1.000000" CLAMP="FALSE"/>
    <RmFloatVariable NAME="TexSpacing" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0.440000" MIN="-1.000000" MAX="0.000000" CLAMP="FALSE"/>
    <RmVectorVariable NAME="vViewPosition" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="ViewPosition" VALUE_0="-187.154266" VALUE_1="36.304852" VALUE_2="-60.457970" VALUE_3="1.000000" MIN="-10.000000" MAX="10.000000" CLAMP="FALSE" NORMALIZE="FALSE"/>
    <RmFloatVariable NAME="fPassIndex" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="PassIndex" VALUE="47.000000" MIN="-1.000000" MAX="1.000000" CLAMP="FALSE"/>
    <RmVectorVariable NAME="vViewDirection" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="ViewDirection" VALUE_0="0.000000" VALUE_1="0.000000" VALUE_2="0.000000" VALUE_3="1.000000" MIN="-10.000000" MAX="10.000000" CLAMP="FALSE" NORMALIZE="FALSE"/>
    <Rm3DTextureVariable NAME="HeadVolume" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" FILE_NAME="..\Media\Textures\HeadVolume.dds" ORIGIN="1"/>
    <RmStreamMap NAME="Stream Mapping" API="">
     <RmStream NAME="Stream" API="" STRIDE="32">
      <RmStreamChannel NAME="Position_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="0" USAGE="0" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_Vertex"/>
      <RmStreamChannel NAME="TexCoord_0" API="" DATA_SIZE="8" DATA_TYPE="1" REGISTER="0" USAGE="5" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_TexCoord0"/>
      <RmStreamChannel NAME="Normal_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="0" USAGE="3" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_Normal"/>
     </RmStream>
    </RmStreamMap>
    <RmModelData NAME="Quad" API="" FILE_NAME="..\Media\Models\Quad.obj" ORIENTATION="0"/>
    <RmModelData NAME="Cube" API="" FILE_NAME="..\Media\Models\Cube.3ds" ORIENTATION="0"/>
    <RmGLPass NAME="Pass 0" API="OpenGL" PASS_INDEX="1" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 20" API="OpenGL" PASS_INDEX="0" ENABLED="TRUE">
     <RmModelReference NAME="Cube" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="2" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

void main(void)
{
   vec4 newVertexPos = gl_Vertex;
   if (gl_Vertex.x >= 0.0)
      newVertexPos.x = CubeCenter.x + CubeDims.x * .5;
   else
      newVertexPos.x = CubeCenter.x - CubeDims.x * .5;
   if (gl_Vertex.y >= 0.0)
      newVertexPos.y = CubeCenter.y + CubeDims.y * .5;
   else
      newVertexPos.y = CubeCenter.y - CubeDims.y * .5;
   if (gl_Vertex.z >= 0.0)
      newVertexPos.z = CubeCenter.z + CubeDims.z * .5;
   else
      newVertexPos.z = CubeCenter.z - CubeDims.z * .5;
   gl_Position = gl_ModelViewProjectionMatrix * newVertexPos;

   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}
]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

void main(void)
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec4  fvBaseColor      = vec4(1.0, .5, 0.0, 0.0);
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient + fvTotalDiffuse + fvTotalSpecular );
 }
]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fSpecularPower" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvDiffuse" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvEyePosition" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvLightPosition" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvSpecular" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 1" API="OpenGL" PASS_INDEX="2" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 2" API="OpenGL" PASS_INDEX="3" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 3" API="OpenGL" PASS_INDEX="4" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>

      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 4" API="OpenGL" PASS_INDEX="5" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 5" API="OpenGL" PASS_INDEX="6" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 6" API="OpenGL" PASS_INDEX="7" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 7" API="OpenGL" PASS_INDEX="8" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 8" API="OpenGL" PASS_INDEX="9" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 9" API="OpenGL" PASS_INDEX="10" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 10" API="OpenGL" PASS_INDEX="11" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 11" API="OpenGL" PASS_INDEX="12" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 12" API="OpenGL" PASS_INDEX="13" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;


varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 13" API="OpenGL" PASS_INDEX="14" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 14" API="OpenGL" PASS_INDEX="15" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 15" API="OpenGL" PASS_INDEX="16" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 16" API="OpenGL" PASS_INDEX="17" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 17" API="OpenGL" PASS_INDEX="18" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 18" API="OpenGL" PASS_INDEX="19" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 19" API="OpenGL" PASS_INDEX="20" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 21" API="OpenGL" PASS_INDEX="21" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 22" API="OpenGL" PASS_INDEX="22" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 23" API="OpenGL" PASS_INDEX="23" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 24" API="OpenGL" PASS_INDEX="24" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 25" API="OpenGL" PASS_INDEX="25" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 26" API="OpenGL" PASS_INDEX="26" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 27" API="OpenGL" PASS_INDEX="27" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 28" API="OpenGL" PASS_INDEX="28" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 29" API="OpenGL" PASS_INDEX="29" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 30" API="OpenGL" PASS_INDEX="30" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 31" API="OpenGL" PASS_INDEX="31" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 32" API="OpenGL" PASS_INDEX="32" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 33" API="OpenGL" PASS_INDEX="33" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 34" API="OpenGL" PASS_INDEX="34" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 35" API="OpenGL" PASS_INDEX="35" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 36" API="OpenGL" PASS_INDEX="36" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 37" API="OpenGL" PASS_INDEX="37" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;

varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 38" API="OpenGL" PASS_INDEX="38" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 39" API="OpenGL" PASS_INDEX="39" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 40" API="OpenGL" PASS_INDEX="40" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 41" API="OpenGL" PASS_INDEX="41" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 42" API="OpenGL" PASS_INDEX="42" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 43" API="OpenGL" PASS_INDEX="43" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 44" API="OpenGL" PASS_INDEX="44" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 45" API="OpenGL" PASS_INDEX="45" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 46" API="OpenGL" PASS_INDEX="46" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
    <RmGLPass NAME="Pass 47" API="OpenGL" PASS_INDEX="47" ENABLED="TRUE">
     <RmModelReference NAME="Quad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="OpenGL">
      <RmState NAME="GL_BlendDestAlpha" API="OpenGL" STATE="51" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendDestRGB" API="OpenGL" STATE="49" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceAlpha" API="OpenGL" STATE="50" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendSourceRGB" API="OpenGL" STATE="48" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_BlendEnable" API="OpenGL" STATE="46" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="GL_CullMode" API="OpenGL" STATE="8" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmGLShader NAME="Fragment Program" API="OpenGL" PIXEL_SHADER="TRUE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec4 fvAmbient;
uniform vec4 fvSpecular;
uniform vec4 fvDiffuse;
uniform float fSpecularPower;

uniform sampler3D HeadVolume;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;

vec4 transferFunc(vec4 incoming)
{
    int remapSize = 5;
    vec4 remap[5];
    remap[0] = vec4(1.0, 0.0, 0.0, 0.0);
    remap[1] = vec4(0.8, 0.2, 0.0, .5);
    remap[2] = vec4(0.5, 1.0, 0.5, .75);
    remap[3] = vec4(0.0, 0.2, 0.8, .5);
    remap[4] = vec4(0.0, 0.0, 1.0, 0.0);
    
    float lookup = incoming.r * float(remapSize);
    int index = int(lookup);
    float lerp = lookup - float(index);

    vec4 outgoing = remap[4];    
    if (index < remapSize - 1)
    {
       outgoing = vec4(mix(remap[index].rgb, remap[index + 1].rgb, lerp), mix(remap[index].a, remap[index + 1].a, lerp));
    }
    return outgoing;
}

void main( void )
{
   vec3  fvLightDirection = normalize( LightDirection );
   vec3  fvNormal         = normalize( Normal );
   float fNDotL           = dot( fvNormal, fvLightDirection ); 
   
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection ); 
   vec3  fvViewDirection  = normalize( ViewDirection );
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );
   
   vec3 modTexCoord = Texcoord;
   vec4  fvBaseColor = vec4(0.0, 0.0, 0.0, 0.0);
   if (Texcoord.x > 0.0 && Texcoord.x < 1.0 && Texcoord.y > 0.0 && Texcoord.y < 1.0 && Texcoord.z > 0.0 && Texcoord.z < 1.0)
   {
      fvBaseColor      = transferFunc( texture3D( HeadVolume, modTexCoord ) );
      //fvBaseColor      = texture3D( HeadVolume, modTexCoord );
      //if (fvBaseColor.a > 0.0)
      {
      //   fvBaseColor.a = fvBaseColor.r;
      }
   }
   
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor; 
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor; 
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );
  
   gl_FragColor = ( fvTotalAmbient );
       
}]]></RmShaderCode></RmGLShader>
     <RmGLShader NAME="Vertex Program" API="OpenGL" PIXEL_SHADER="FALSE"><RmShaderCode TYPE="TEXT"><![CDATA[
uniform vec3 fvLightPosition;
uniform vec3 fvEyePosition;
uniform vec4 vViewPosition;
uniform vec4 vViewDirection;

uniform vec2 TranslateDist;
uniform vec3 CubeDims;
uniform vec3 CubeCenter;

uniform float PlaneSpacing;
uniform float TexStart;
uniform float TexSpacing;
uniform float fPassIndex;

varying vec3 Texcoord;
varying vec3 ViewDirection;
varying vec3 LightDirection;
varying vec3 Normal;
varying float TexSample;

vec4 rotatePointToVector(vec4 point, vec4 vector)
{
   // build a rotation matrix that will rotate the point that begins at 0,0,1
   mat4 yrot;
   mat4 xrot;
  
   // rotate around y first
   float hypot = vector.x * vector.x + vector.z * vector.z;
   hypot = sqrt(hypot);
   float cosTheta = vector.z / hypot;
   float sinTheta = vector.x / hypot;

   yrot[0] = vec4(cosTheta, 0.0, sinTheta, 0.0);
   yrot[1] = vec4(0.0, 1.0, 0.0, 0.0);
   yrot[2] = vec4(-sinTheta, 0.0, cosTheta, 0.0);
   yrot[3] = vec4(0.0, 0.0, 0.0, 1.0);

   vec4 temp = vector * yrot;
   
   // rotate around x
   hypot = temp.y * temp.y + temp.z * temp.z;
   cosTheta = temp.z / hypot;
   sinTheta = temp.y / hypot;
   
   xrot[0] = vec4(1.0, 0.0, 0.0, 0.0);
   xrot[1] = vec4(0.0, cosTheta, sinTheta, 0.0);
   xrot[2] = vec4(0.0, -sinTheta, cosTheta, 0.0);
   xrot[3] = vec4(0.0, 0.0, 0.0, 1.0);
   
   mat4 finalRot = yrot * xrot;
   
   vec4 rotPoint = point * finalRot;
   return rotPoint;
}

vec4 findNearestCubeVertexDist(void)
{
   float distMin = 100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvNearestVertex = vec4(0.0, 0.0, 0.0, distMin);
   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist < distMin)
               {
                  distMin = mvNearestVertex.w = vertDist;
                  mvNearestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvNearestVertex;
}

vec4 findFarthestCubeVertexDist(void)
{
   float distMax = -100000.0;
   vec4 cubeVertex = vec4(0.0, 0.0, 0.0, 1.0);
   vec4 mvFarthestVertex = vec4(0.0, 0.0, 0.0, distMax);

   
   for (int cubeX = 0; cubeX < 2; ++cubeX)
   {
      cubeVertex.x = CubeCenter.x;
      cubeVertex.x += (cubeX == 1 ? CubeDims.x * .5: -CubeDims.x * .5);
      for (int cubeY = 0; cubeY < 2; ++cubeY)
      {
         cubeVertex.y = CubeCenter.y;
         cubeVertex.y += (cubeY == 1 ? CubeDims.y * .5: -CubeDims.y * .5);
         for (int cubeZ = 0; cubeZ < 2; ++cubeZ)
         {
            cubeVertex.z = CubeCenter.z;
            cubeVertex.z += (cubeZ == 1 ? CubeDims.z * .5: -CubeDims.z * .5);
            vec4 mvCubeVertex = gl_ModelViewMatrix * cubeVertex;
            // In view space -z is in front of the camera
            if (mvCubeVertex.z < 0.0)
            {
               float vertDist = length(mvCubeVertex);
               if (vertDist > distMax)
               {
                  distMax = mvFarthestVertex.w = vertDist;
                  mvFarthestVertex.xyz = mvCubeVertex.xyz;
               }
            }
         }
      }
   }
   return mvFarthestVertex;
}

float getCubeDiagonalLength(void)
{
   vec3 diagonalVec = vec3(CubeDims.x, CubeDims.y, CubeDims.z);
   return length(diagonalVec);
}

void main( void )
{
   vec4 newVertexPos = gl_Vertex;
   vec4 mvNearestVertex;
   vec4 mvFarthestVertex;
   
   TexSample = 1.0 - (TexStart + TexSpacing * fPassIndex);
   Texcoord    = gl_MultiTexCoord0.xyz;

   float cubeDiagonal = getCubeDiagonalLength() * .5;
   
   mvFarthestVertex = findFarthestCubeVertexDist();
   float farVertDist = mvFarthestVertex.w;
   mvNearestVertex = findNearestCubeVertexDist();
   float nearVertMinDist = mvNearestVertex.w;
   if (farVertDist > 0.0)
   {
      float curQuadDist = farVertDist - PlaneSpacing * fPassIndex;
      if (curQuadDist > nearVertMinDist && curQuadDist > 0.0)
      {
         // All work to be done in view space
         // Find center of cube in model space where the origin is the camera location
         vec4 mvCubeCenter = gl_ModelViewMatrix * vec4(CubeCenter, 1.0);
         // find the view vector from camera to object
         vec4 mvCubeDirection = vec4(normalize(mvCubeCenter.xyz), 1.0);
         // Find location of our new quad
         vec4 quadPosition = vec4(mvCubeDirection.xyz * curQuadDist, 1.0);
         
         // Resize the quad's vertex by the distance across the cube diagonally
         if (gl_Vertex.x >= 0.0)
            newVertexPos.x = cubeDiagonal;
         else
            newVertexPos.x = -cubeDiagonal;
         if (gl_Vertex.y >= 0.0)
            newVertexPos.y = cubeDiagonal;
         else
            newVertexPos.y = -cubeDiagonal;
         newVertexPos.z = 0.0;
          
         // rotate the point so normal aligns with the view vector
         newVertexPos = rotatePointToVector(newVertexPos, normalize(-quadPosition) );
   
         // move quad to target position in view space
         newVertexPos.x += quadPosition.x;
         newVertexPos.y += quadPosition.y;
         newVertexPos.z += quadPosition.z;
         
         // Find the coordinates in model space relative to the data cube
         vec4 vertexCopy = gl_ModelViewMatrixInverse * newVertexPos;
         Texcoord    = vec3(.5 + (vertexCopy.x - CubeCenter.x) / CubeDims.x,
            .5 + (vertexCopy.y - CubeCenter.y) / CubeDims.y, .5 + (vertexCopy.z - CubeCenter.z) / CubeDims.z);
       }
      else
      {
         newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
      }
   }
   else
   {
      newVertexPos = vec4(0.0, 0.0, 10000.0, 1.0);
   }

   // set the position
   gl_Position = gl_ProjectionMatrix * newVertexPos;

    
   vec4 fvObjectPosition = gl_ModelViewMatrix * newVertexPos;
   
   ViewDirection  = fvEyePosition - fvObjectPosition.xyz;
   LightDirection = fvLightPosition - fvObjectPosition.xyz;
   Normal         = gl_NormalMatrix * gl_Normal;
   
}]]></RmShaderCode></RmGLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="HeadVolume" API="OpenGL" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HeadVolume" API=""/>
      <RmState NAME="GL_TextureWrapR" API="OpenGL" STATE="3" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapS" API="OpenGL" STATE="1" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="GL_TextureWrapT" API="OpenGL" STATE="2" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmSampler NAME="HeadVolume" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeDims" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="CubeCenter" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="PlaneSpacing" API="" REGISTER="-1"/>

     <RmShaderConstant NAME="fPassIndex" API="" REGISTER="-1"/>
     <RmShaderConstant NAME="fvAmbient" API="" REGISTER="-1"/>
    </RmGLPass>
   </RmOpenGLEffect>
   <RmDynamicVariable NAME="CubeCenter" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VARIABLE_TYPE="FLOAT" ROWS="3" COLUMNS="1" FIXED_SIZE="TRUE" MIN="-500.000000" MAX="500.000000" CLAMP="TRUE" NORMALIZE="FALSE">
    <RmDynamicVariableValueContainer>
     <RmDynamicVariableValue ROW_INDEX="0" COLUMN_INDEX="0" VALUE="10.000000"/>
     <RmDynamicVariableValue ROW_INDEX="1" COLUMN_INDEX="0" VALUE="0.000000"/>
     <RmDynamicVariableValue ROW_INDEX="2" COLUMN_INDEX="0" VALUE="-20.000000"/>
    </RmDynamicVariableValueContainer>
   </RmDynamicVariable>
   <RmDynamicVariable NAME="CubeDims" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VARIABLE_TYPE="FLOAT" ROWS="3" COLUMNS="1" FIXED_SIZE="TRUE" MIN="0.000000" MAX="100.000000" CLAMP="TRUE" NORMALIZE="FALSE">
    <RmDynamicVariableValueContainer>
     <RmDynamicVariableValue ROW_INDEX="0" COLUMN_INDEX="0" VALUE="49.000000"/>
     <RmDynamicVariableValue ROW_INDEX="1" COLUMN_INDEX="0" VALUE="60.000000"/>
     <RmDynamicVariableValue ROW_INDEX="2" COLUMN_INDEX="0" VALUE="85.000000"/>
    </RmDynamicVariableValueContainer>
   </RmDynamicVariable>
   <RmDynamicVariable NAME="fvLightPosition" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VARIABLE_TYPE="FLOAT" ROWS="3" COLUMNS="1" FIXED_SIZE="TRUE" MIN="-100.000000" MAX="100.000000" CLAMP="TRUE" NORMALIZE="FALSE">
    <RmDynamicVariableValueContainer>
     <RmDynamicVariableValue ROW_INDEX="0" COLUMN_INDEX="0" VALUE="-100.000000"/>
     <RmDynamicVariableValue ROW_INDEX="1" COLUMN_INDEX="0" VALUE="100.000000"/>
     <RmDynamicVariableValue ROW_INDEX="2" COLUMN_INDEX="0" VALUE="100.000000"/>
    </RmDynamicVariableValueContainer>
   </RmDynamicVariable>
   <RmDynamicVariable NAME="fvEyePosition" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VARIABLE_TYPE="FLOAT" ROWS="3" COLUMNS="1" FIXED_SIZE="TRUE" MIN="-100.000000" MAX="100.000000" CLAMP="TRUE" NORMALIZE="FALSE">
    <RmDynamicVariableValueContainer>
     <RmDynamicVariableValue ROW_INDEX="0" COLUMN_INDEX="0" VALUE="100.000000"/>
     <RmDynamicVariableValue ROW_INDEX="1" COLUMN_INDEX="0" VALUE="0.000000"/>
     <RmDynamicVariableValue ROW_INDEX="2" COLUMN_INDEX="0" VALUE="100.000000"/>
    </RmDynamicVariableValueContainer>
   </RmDynamicVariable>
   <RmFloatVariable NAME="fSpecularPower" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE="28.719999" MIN="1.000000" MAX="100.000000" CLAMP="TRUE"/>
   <RmColorVariable NAME="fvDiffuse" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE_0="0.886275" VALUE_1="0.885003" VALUE_2="0.885003" VALUE_3="1.000000"/>
   <RmColorVariable NAME="fvSpecular" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE_0="0.490196" VALUE_1="0.488722" VALUE_2="0.488722" VALUE_3="1.000000"/>
   <RmColorVariable NAME="myColor" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE_0="1.000000" VALUE_1="1.000000" VALUE_2="1.000000" VALUE_3="1.000000"/>
   <RmColorVariable NAME="fvAmbient" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE_0="1.000000" VALUE_1="1.000000" VALUE_2="1.000000" VALUE_3="1.000000"/>
  </RmEffectGroup>
 </RmEffectWorkspace>
</RENDER_MONKEY>
